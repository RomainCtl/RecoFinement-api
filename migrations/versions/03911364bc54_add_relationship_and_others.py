"""add_relationship_and_others

Revision ID: 03911364bc54
Revises: 93b67450f5bc
Create Date: 2020-09-26 16:29:46.399460

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '03911364bc54'
down_revision = '93b67450f5bc'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('meta_user_application',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('app_id', sa.Integer(), nullable=False),
    sa.Column('review', sa.Text(), nullable=True),
    sa.Column('popularity', sa.Float(), nullable=True),
    sa.Column('subjectivity', sa.Float(), nullable=True),
    sa.Column('rating', sa.Integer(), nullable=True),
    sa.CheckConstraint('rating <= 5 and rating >= 0'),
    sa.ForeignKeyConstraint(['app_id'], ['application.app_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.user_id'], ),
    sa.PrimaryKeyConstraint('user_id', 'app_id')
    )
    op.create_table('meta_user_book',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('isbn', sa.Integer(), nullable=False),
    sa.Column('rating', sa.Integer(), nullable=True),
    sa.CheckConstraint('rating <= 5 and rating >= 0'),
    sa.ForeignKeyConstraint(['isbn'], ['book.isbn'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.user_id'], ),
    sa.PrimaryKeyConstraint('user_id', 'isbn')
    )
    op.create_table('meta_user_game',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('game_id', sa.Integer(), nullable=False),
    sa.Column('purchase', sa.Boolean(), nullable=True),
    sa.Column('hours', sa.Float(), nullable=True),
    sa.Column('rating', sa.Integer(), nullable=True),
    sa.CheckConstraint('rating <= 5 and rating >= 0'),
    sa.ForeignKeyConstraint(['game_id'], ['game.game_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.user_id'], ),
    sa.PrimaryKeyConstraint('user_id', 'game_id')
    )
    op.create_table('meta_user_track',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('track_id', sa.Integer(), nullable=False),
    sa.Column('play_count', sa.Integer(), nullable=True),
    sa.Column('rating', sa.Integer(), nullable=True),
    sa.CheckConstraint('rating <= 5 and rating >= 0'),
    sa.ForeignKeyConstraint(['track_id'], ['track.track_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.user_id'], ),
    sa.PrimaryKeyConstraint('user_id', 'track_id')
    )
    op.create_table('similars_track',
    sa.Column('track_id0', sa.Integer(), nullable=False),
    sa.Column('track_id1', sa.Integer(), nullable=False),
    sa.Column('similarity', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['track_id0'], ['track.track_id'], ),
    sa.ForeignKeyConstraint(['track_id1'], ['track.track_id'], ),
    sa.PrimaryKeyConstraint('track_id0', 'track_id1')
    )
    op.drop_table('genre')
    op.add_column('application', sa.Column('android_version', sa.String(length=255), nullable=True))
    op.add_column('application', sa.Column('app_id', sa.Integer(), autoincrement=True, nullable=False))
    op.add_column('application', sa.Column('current_version', sa.String(length=255), nullable=True))
    op.add_column('application', sa.Column('genres', sa.String(length=255), nullable=True))
    op.add_column('application', sa.Column('name', sa.String(length=255), nullable=True))
    op.create_index(op.f('ix_application_app_id'), 'application', ['app_id'], unique=False)
    op.create_index(op.f('ix_application_name'), 'application', ['name'], unique=True)
    op.drop_constraint('application_uid_key', 'application', type_='unique')
    op.drop_index('ix_application_app_name', table_name='application')
    op.drop_column('application', 'latest_version')
    op.drop_column('application', 'id')
    op.drop_column('application', 'uid')
    op.drop_column('application', 'minimum_version')
    op.drop_column('application', 'app_name')
    op.drop_column('book', 'rating')
    op.drop_column('book', 'rating_count')
    op.add_column('game', sa.Column('developers', sa.String(length=255), nullable=True))
    op.add_column('game', sa.Column('game_id', sa.Integer(), autoincrement=True, nullable=False))
    op.add_column('game', sa.Column('header_image', sa.String(length=255), nullable=True))
    op.add_column('game', sa.Column('publishers', sa.String(length=255), nullable=True))
    op.add_column('game', sa.Column('recommendations', sa.String(length=255), nullable=True))
    op.add_column('game', sa.Column('release_date', sa.String(length=255), nullable=True))
    op.add_column('game', sa.Column('short_description', sa.Text(), nullable=True))
    op.add_column('game', sa.Column('steamid', sa.Integer(), nullable=True))
    op.add_column('game', sa.Column('website', sa.String(length=255), nullable=True))
    op.alter_column('game', 'price',
               existing_type=postgresql.DOUBLE_PRECISION(precision=53),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.create_index(op.f('ix_game_game_id'), 'game', ['game_id'], unique=False)
    op.create_index(op.f('ix_game_name'), 'game', ['name'], unique=False)
    op.drop_constraint('game_uid_key', 'game', type_='unique')
    op.drop_column('game', 'developer')
    op.drop_column('game', 'languages')
    op.drop_column('game', 'id')
    op.drop_column('game', 'rating_count')
    op.drop_column('game', 'primary_genre')
    op.drop_column('game', 'uid')
    op.drop_column('game', 'rating')
    op.drop_column('game', 'size')
    op.drop_column('game', 'original_release_date')
    op.drop_column('game', 'description')
    op.drop_column('game', 'icon_url')
    op.drop_column('game', 'in_app_purchases')
    op.add_column('tag', sa.Column('tag_id', sa.Integer(), autoincrement=True, nullable=False))
    op.create_index(op.f('ix_tag_tag_id'), 'tag', ['tag_id'], unique=False)
    op.drop_index('ix_tag_name', table_name='tag')
    op.drop_column('tag', 'id')
    op.add_column('track', sa.Column('covert_art_url', sa.String(length=255), nullable=True))
    op.add_column('track', sa.Column('recording_mbid', postgresql.UUID(as_uuid=True), nullable=True))
    op.add_column('track', sa.Column('release', sa.String(length=255), nullable=True))
    op.add_column('track', sa.Column('title', sa.String(length=255), nullable=True))
    op.add_column('track', sa.Column('track_id', sa.Integer(), autoincrement=True, nullable=False))
    op.add_column('track', sa.Column('url', sa.String(length=255), nullable=True))
    op.add_column('track', sa.Column('year', sa.SmallInteger(), nullable=True))
    op.alter_column('track', 'language',
               existing_type=sa.VARCHAR(length=2),
               type_=sa.String(length=45),
               existing_nullable=True)
    op.create_index(op.f('ix_track_title'), 'track', ['title'], unique=False)
    op.create_index(op.f('ix_track_track_id'), 'track', ['track_id'], unique=False)
    op.drop_index('ix_track_name', table_name='track')
    op.drop_constraint('track_gid_key', 'track', type_='unique')
    op.create_unique_constraint(None, 'track', ['recording_mbid'])
    op.drop_column('track', 'date_year')
    op.drop_column('track', 'id')
    op.drop_column('track', 'album_name')
    op.drop_column('track', 'name')
    op.drop_column('track', 'gid')
    op.drop_column('track', 'date_day')
    op.drop_column('track', 'date_month')
    op.add_column('track_tags', sa.Column('tag_id', sa.Integer(), nullable=False))
    op.drop_constraint('track_tags_track_id_fkey', 'track_tags', type_='foreignkey')
    op.drop_constraint('track_tags_tag_fkey', 'track_tags', type_='foreignkey')
    op.create_foreign_key(None, 'track_tags', 'track', ['track_id'], ['track_id'])
    op.create_foreign_key(None, 'track_tags', 'tag', ['tag_id'], ['tag_id'])
    op.drop_column('track_tags', 'tag')
    op.add_column('user', sa.Column('user_id', sa.Integer(), autoincrement=True, nullable=False))
    op.create_index(op.f('ix_user_user_id'), 'user', ['user_id'], unique=False)
    op.drop_column('user', 'id')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user', sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False))
    op.drop_index(op.f('ix_user_user_id'), table_name='user')
    op.drop_column('user', 'user_id')
    op.add_column('track_tags', sa.Column('tag', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'track_tags', type_='foreignkey')
    op.drop_constraint(None, 'track_tags', type_='foreignkey')
    op.create_foreign_key('track_tags_tag_fkey', 'track_tags', 'tag', ['tag'], ['id'])
    op.create_foreign_key('track_tags_track_id_fkey', 'track_tags', 'track', ['track_id'], ['id'])
    op.drop_column('track_tags', 'tag_id')
    op.add_column('track', sa.Column('date_month', sa.SMALLINT(), autoincrement=False, nullable=True))
    op.add_column('track', sa.Column('date_day', sa.SMALLINT(), autoincrement=False, nullable=True))
    op.add_column('track', sa.Column('gid', postgresql.UUID(), autoincrement=False, nullable=False))
    op.add_column('track', sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('track', sa.Column('album_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('track', sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False))
    op.add_column('track', sa.Column('date_year', sa.SMALLINT(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'track', type_='unique')
    op.create_unique_constraint('track_gid_key', 'track', ['gid'])
    op.create_index('ix_track_name', 'track', ['name'], unique=False)
    op.drop_index(op.f('ix_track_track_id'), table_name='track')
    op.drop_index(op.f('ix_track_title'), table_name='track')
    op.alter_column('track', 'language',
               existing_type=sa.String(length=45),
               type_=sa.VARCHAR(length=2),
               existing_nullable=True)
    op.drop_column('track', 'year')
    op.drop_column('track', 'url')
    op.drop_column('track', 'track_id')
    op.drop_column('track', 'title')
    op.drop_column('track', 'release')
    op.drop_column('track', 'recording_mbid')
    op.drop_column('track', 'covert_art_url')
    op.add_column('tag', sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False))
    op.create_index('ix_tag_name', 'tag', ['name'], unique=False)
    op.drop_index(op.f('ix_tag_tag_id'), table_name='tag')
    op.drop_column('tag', 'tag_id')
    op.add_column('game', sa.Column('in_app_purchases', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('game', sa.Column('icon_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('game', sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('game', sa.Column('original_release_date', sa.VARCHAR(length=45), autoincrement=False, nullable=True))
    op.add_column('game', sa.Column('size', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('game', sa.Column('rating', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('game', sa.Column('uid', postgresql.UUID(), autoincrement=False, nullable=False))
    op.add_column('game', sa.Column('primary_genre', sa.VARCHAR(length=45), autoincrement=False, nullable=True))
    op.add_column('game', sa.Column('rating_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('game', sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False))
    op.add_column('game', sa.Column('languages', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('game', sa.Column('developer', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.create_unique_constraint('game_uid_key', 'game', ['uid'])
    op.drop_index(op.f('ix_game_name'), table_name='game')
    op.drop_index(op.f('ix_game_game_id'), table_name='game')
    op.alter_column('game', 'price',
               existing_type=sa.String(length=255),
               type_=postgresql.DOUBLE_PRECISION(precision=53),
               existing_nullable=True)
    op.drop_column('game', 'website')
    op.drop_column('game', 'steamid')
    op.drop_column('game', 'short_description')
    op.drop_column('game', 'release_date')
    op.drop_column('game', 'recommendations')
    op.drop_column('game', 'publishers')
    op.drop_column('game', 'header_image')
    op.drop_column('game', 'game_id')
    op.drop_column('game', 'developers')
    op.add_column('book', sa.Column('rating_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('book', sa.Column('rating', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('application', sa.Column('app_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('application', sa.Column('minimum_version', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('application', sa.Column('uid', postgresql.UUID(), autoincrement=False, nullable=False))
    op.add_column('application', sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False))
    op.add_column('application', sa.Column('latest_version', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.create_index('ix_application_app_name', 'application', ['app_name'], unique=True)
    op.create_unique_constraint('application_uid_key', 'application', ['uid'])
    op.drop_index(op.f('ix_application_name'), table_name='application')
    op.drop_index(op.f('ix_application_app_id'), table_name='application')
    op.drop_column('application', 'name')
    op.drop_column('application', 'genres')
    op.drop_column('application', 'current_version')
    op.drop_column('application', 'app_id')
    op.drop_column('application', 'android_version')
    op.create_table('genre',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('gid', postgresql.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='genre_pkey'),
    sa.UniqueConstraint('gid', name='genre_gid_key')
    )
    op.drop_table('similars_track')
    op.drop_table('meta_user_track')
    op.drop_table('meta_user_game')
    op.drop_table('meta_user_book')
    op.drop_table('meta_user_application')
    # ### end Alembic commands ###
